@function strip-unit($num) {
	@return $num / ($num * 0 + 1);
}

@function convert-to-rem($value, $base-value: 16) {
	$value: strip-unit($value) / strip-unit($base-value) * 1rem;
	@if ($value == 0rem) {
		$value: 0;
	}
	// Turn 0rem into 0
	@return $value;
}

@function lower-bound($range) {
	@if length($range) <= 0 {
		@return 0;
	}
	@return nth($range, 1);
}

@function rem-calc($values, $base-value: 16) {
	$max: length($values);

	@if $max == 1 {
		@return convert-to-rem(nth($values, 1), $base-value);
	}

	$remValues: ();
	@for $i from 1 through $max {
		$remValues: append($remValues, convert-to-rem(nth($values, $i), $base-value));
	}
	@return $remValues;
}

@function em-calc($values) {
	$remValues: rem-calc($values);

	$max: length($remValues);

	@if $max == 1 {
		@return strip-unit(nth($remValues, 1)) * 1em;
	}

	$emValues: ();
	@for $i from 1 through $max {
		$emValues: append($emValues, strip-unit(nth($remValues, $i)) * 1em);
	}
	@return $emValues;
}

@function upper-bound($range) {
	@if length($range) < 2 {
		@return 999999999999;
	}
	@return nth($range, 2);
}
